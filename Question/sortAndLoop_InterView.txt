::::::::::: Important Loop start row class :::::::::::::::

let data=[10 , 20 , 30 , 40 , 50]

let start=0

let end=data.length-1; // start 0 , end 4

while(start < end){

   console.log(start ++  , "start")
   console.log(end --  ,"end")

   //start ++ // start 0 , start 1 , start 2, start 3 , start 4 

  // end-- // end 4 , end = 3 , end = 2 , end = 1
}

let data = [10, 20, 30, 40, 50], start = 0, end = data.length - 1;

while (start < end) console.log(start++, end--);

::::::::::::::::::::::::::::::::::



debugger;  for(let i=0; i<5; i=i+1){ 0+1  , 1+1  ,  2+1 , 3+1 , , 4+1
    console.log(i);
    if(i===2){   
        break;
    }
}


for Loop With reverse ..........................>>>
 for(let i=5;  i>=0; i--){ // 5=5-1 i=1 , 4=4-1 , 3=3-1 , 2=2-1 , 1=1-1
   // i=5  , 5 >= 0  , 5=5-1
   console.log(i)
}
for(let i=5;  i>0; i--){ //5-1 == 4
   console.log(i)
}

console.log(5>0 , '5 > 0')
console.log(0>0  , '0>0')



let  data=[2 , 3 , 4 , 5 , 6 , 7 , 8 ,9]  /// array Loop In 
for(let i=0; i<data.length; i++){  // 0 < 8  , 1 <8 , 2 <8 , 3 < 8
   // console.log(data[i])
}
console.log(data.length)
console.log(8 < 8)


// while  Loop start   ----------------------->><><><>

 let i=0
 debugger;  while(i<5){  //0 < 5
    console.log(i);  //0 
  
   i=i+1;  //0=0+1
 }


 let i=5;

while(i>=0)
{
   console.log(i)

   i--;  // Decrease i by 1 each time the loop runs
}





/// ------ > Do while Loop 
let i=0;
 do{
   console.log(i) //0
   i++ //0=0+1
}while(i<5) // i<5

::::::::::::::: for in or of  ::::::::::::::::::
Key Differences:
for...in: Iterates over the indexes (keys) of the array.
for...of: Iterates over the values of the array.

for(let i in data){
   console.log(i)
}


for(let i of data){
   console.log(i)
}


//// set Interval Loop Important .........................

let i=0
let data=setInterval(()=>{
   console.log(i) 
   i++
   if(i == 5){
      clearInterval(data)
   }
}, 2000)


::::::::::: odd Even 
let  data=[2 , 3 , 4 , 5 , 6 , 7 , 8 ,9]
for(let i=0; i<data.length; i++){
   if(i%2 === 0){
    console.log(data[i])
   }
}





8. Looping with Dynamic Conditions :::::::::::::::::::::::::::::::::::::::

Loops can be dynamically controlled using changing conditions,
 based on values in other data structures or states. This is
 useful in AI, simulations, or event-driven systems.
let isRunning = true;
let i = 0;

while (isRunning) {
    console.log(i);
    i++;
    if (i >= 5) {
        isRunning = false; // Dynamically stop the loop based on logic
    }
}





::::::::::::::  .......... Recursively calls itself after 2 seconds 

function one() {
    setTimeout(() => {
        console.log('jugal sharma');
        one(); // Recursively calls itself after 2 seconds
    }, 2000);
}

one(); // Initial call




function one(i = 0) {  // Initialize i to 0
   if (i < 5) {
       console.log(i);  // Print the value of i to see the iterations
       one(i + 1);  // Increment i before passing it in the recursive call
   }
}

one();  // Initial call
